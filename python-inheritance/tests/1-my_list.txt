The ``MyList`` module
  ======================

  Using ``MyList``
  ----------------

  Importing the class:
  >>> MyList = __import__('1-my_list').MyList

  Creating and using MyList:
  >>> my_list = MyList()
  >>> my_list.append(1)
  >>> my_list.append(4)
  >>> my_list.append(2)
  >>> my_list.append(3)
  >>> my_list.append(5)
  >>> print(my_list)
  [1, 4, 2, 3, 5]
  >>> my_list.print_sorted()
  [1, 2, 3, 4, 5]
  >>> print(my_list)
  [1, 4, 2, 3, 5]

  Testing with different initialization:
  >>> my_list2 = MyList([3, 1, 4])
  >>> my_list2.print_sorted()
  [1, 3, 4]

  Edge cases:
  >>> empty = MyList()
  >>> empty.print_sorted()
  []

  >>> single = MyList([42])
  >>> single.print_sorted()
  [42]

  >>> duplicates = MyList([3, 1, 3, 2, 1])
  >>> duplicates.print_sorted()
  [1, 1, 2, 3, 3]

  >>> negatives = MyList([-3, 1, -1, 0, 2])
  >>> negatives.print_sorted()
  [-3, -1, 0, 1, 2]

  Inheritance testing:
  >>> my_list = MyList([1, 2, 3])
  >>> isinstance(my_list, list)
  True
  >>> isinstance(my_list, MyList)
  True
  >>> len(my_list)
  3

  Method returns None:
  >>> my_list = MyList([3, 1, 2])
  >>> result = my_list.print_sorted()
  [1, 2, 3]
  >>> print(result)
  None

  Original list unchanged after operations:
  >>> my_list = MyList([5, 2, 8, 1])
  >>> my_list.print_sorted()
  [1, 2, 5, 8]
  >>> my_list.pop()
  1
  >>> my_list.print_sorted()
  [2, 5, 8]
  >>> my_list
  [5, 2, 8]
