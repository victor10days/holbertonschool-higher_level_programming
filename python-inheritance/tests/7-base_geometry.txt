The ``BaseGeometry`` module
==========================

Using ``BaseGeometry``
----------------------

Importing the class:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Creating and using BaseGeometry:
>>> bg = BaseGeometry()

Testing area method:
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

Testing integer_validator with valid integers:
>>> bg = BaseGeometry()
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

Testing integer_validator with invalid types:
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
...
ValueError: distance must be greater than 0

Testing with float:
>>> bg.integer_validator("height", 3.14)
Traceback (most recent call last):
...
TypeError: height must be an integer

Testing with boolean:
>>> bg.integer_validator("flag", True)
Traceback (most recent call last):
...
TypeError: flag must be an integer

Testing with list:
>>> bg.integer_validator("my_list", [3])
Traceback (most recent call last):
...
TypeError: my_list must be an integer

Testing with tuple:
>>> bg.integer_validator("my_tuple", (4,))
Traceback (most recent call last):
...
TypeError: my_tuple must be an integer

Testing with None:
>>> bg.integer_validator("my_none", None)
Traceback (most recent call last):
...
TypeError: my_none must be an integer

Testing with dict:
>>> bg.integer_validator("my_dict", {3, 4})
Traceback (most recent call last):
...
TypeError: my_dict must be an integer

Testing positive edge case:
>>> bg.integer_validator("positive", 1)

Testing large integer:
>>> bg.integer_validator("big_number", 1000000)

Testing method return value:
>>> result = bg.integer_validator("test", 5)
>>> print(result)
None

Testing zero:
>>> bg.integer_validator("zero", 0)
Traceback (most recent call last):
...
ValueError: zero must be greater than 0

Testing negative zero:
>>> bg.integer_validator("neg_zero", -0)
Traceback (most recent call last):
...
ValueError: neg_zero must be greater than 0